<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fixed Lights</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
        }
    </style>
</head>
<body>
    <script src="js/three.js"></script>
    <script src="js/OrbitControls.js"></script>

    <script>
        // RENDERER
        var renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setClearColor(0x000000);
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Make Canvas Responsive on resize
        window.addEventListener('resize', function () {
            var width = window.innerWidth;
            var height = window.innerHeight;
            renderer.setSize(width, height);
            camera.aspect = width / height;
            camera.updateProjectionMatrix();
        });

        // CAMERA
        var camera = new THREE.PerspectiveCamera(55, window.innerWidth / window.innerHeight, 0.1, 3000);
        camera.position.set(0, 0, 150);

        // SCENE
        var scene = new THREE.Scene();

        // GROUP FOR OBJECTS (Rotates with OrbitControls)
        var objectGroup = new THREE.Group();
        scene.add(objectGroup);

        // LIGHTS (Fixed and Uniform)
        // Ambient light for base lighting
        var ambLight = new THREE.AmbientLight(0xffffff, 0.6); // Soft, global illumination
        scene.add(ambLight);

        // Directional light for front
        var dirLightFront = new THREE.DirectionalLight(0xffffff, 0.8);
        dirLightFront.position.set(0, 0, 200); // Position in front of the card
        scene.add(dirLightFront);

        // Directional light for back
        var dirLightBack = new THREE.DirectionalLight(0xffffff, 0.8);
        dirLightBack.position.set(0, 0, -200); // Position behind the card
        scene.add(dirLightBack);

        // Additional point lights for balanced lighting
        var pointLightTop = new THREE.PointLight(0xffffff, 0.5);
        pointLightTop.position.set(0, 200, 0);
        scene.add(pointLightTop);

        var pointLightBottom = new THREE.PointLight(0xffffff, 0.5);
        pointLightBottom.position.set(0, -200, 0);
        scene.add(pointLightBottom);

        // ORBITCONTROLS (Affect only the camera)
        var controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true; // Smooth damping
        controls.dampingFactor = 0.25;
        controls.screenSpacePanning = false;
        controls.minDistance = 50;
        controls.maxDistance = 500;
        controls.maxPolarAngle = Math.PI; // Allow full rotation

        // MODEL GEOMETRY
        var geometry = new THREE.BoxGeometry(90, 50, 0.45);

        // TEXTURES
        var texLoader = new THREE.TextureLoader();
        var tex0 = texLoader.load('https://i.imgur.com/gNHzckU.png');
        var texFront = texLoader.load('img/meodel_f.jpg');
        var texBack = texLoader.load('img/meodel_b.jpg');
        var texCloud = texLoader.load('https://i.imgur.com/Q8CXq1R.png');

        var tx = {
            roughness: 0.5, // Lower roughness for a shinier effect
            metalness: 0.7, // Moderate metalness
            bumpScale: 0.15
        };

        var cubeMaterials = [
            new THREE.MeshStandardMaterial({ map: tex0 }),
            new THREE.MeshStandardMaterial({ map: tex0 }),
            new THREE.MeshStandardMaterial({ map: tex0 }),
            new THREE.MeshStandardMaterial({ map: tex0 }),
            new THREE.MeshStandardMaterial({
                map: texFront,
                metalness: tx['metalness'],
                bumpScale: tx['bumpScale'],
                roughness: tx['roughness'],
                bumpMap: texCloud
            }),
            new THREE.MeshStandardMaterial({
                map: texBack,
                metalness: tx['metalness'],
                bumpScale: tx['bumpScale'],
                roughness: tx['roughness'],
                bumpMap: texCloud
            })
        ];

        // CREATE MESH
        var mesh = new THREE.Mesh(geometry, cubeMaterials);
        mesh.position.set(0, 0, 0);
        objectGroup.add(mesh); // Add to rotating group

        // ANIMATION
        requestAnimationFrame(render);
        function render() {
            controls.update(); // Update controls
            renderer.render(scene, camera); // Render the scene
            requestAnimationFrame(render); // Loop the render function
        }
    </script>
</body>
</html>
